<?php

namespace app\models;

use yii\helpers\ArrayHelper;
use yii\imagine\Image;
use Yii;

/**
 * This is the model class for table "medicine".
 *
 * @property int $id_med
 * @property string|null $name
 * @property string|null $manufacture
 * @property string|null $form
 * @property string|null $instruct
 * @property string|null $foto
 *
 * @property NaznMed[] $naznMeds
 * @property ProtMed[] $protMeds
 * @property VechMed[] $vechMeds
 */
class Medicine extends \yii\db\ActiveRecord
{
    /**
     * Вспомогательный атрибут для загрузки изображения
     */
    public $upload;

    public $mnnaznachenie;
    public $mnprotivopok;
    public $mnvechestvo;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'medicine';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'manufacture', 'form', 'instruct', 'foto'], 'string', 'max' => 50],
            [['mnnaznachenie', 'mnprotivopok', 'mnvechestvo'], 'safe'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id_med' => 'ID',
            'name' => 'Название',
            'manufacture' => 'Производитель',
            'form' => 'Форма выпуска',
            'instruct' => 'Инструкция',
            'foto' => 'Фото',
            'mnnaznachenie' => 'Назначение',
            'mnprotivopok' => 'Противопоказания',
            'mnvechestvo' => 'Активные вещества',
        ];
    }

    /**
     * Gets query for [[NaznMeds]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getNaznMeds()
    {
//        return $this->hasMany(NaznMed::class, ['id_med' => 'id_med']);
        return $this->hasMany(Naznachenie::className(), ['id_nazn' => 'id_nazn'])->viaTable('naznmed', ['id_med' => 'id_med']);

    }

    /**
     * Gets query for [[ProtMeds]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getProtMeds()
    {
//        return $this->hasMany(ProtMed::class, ['id_med' => 'id_med']);
        return $this->hasMany(Protivop::className(), ['id_contr' => 'id_prot'])->viaTable('protmed', ['id_med' => 'id_med']);

    }

    /**
     * Gets query for [[VechMeds]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getVechMeds()
    {
//        return $this->hasMany(VechMed::class, ['id_med' => 'id_med']);
        return $this->hasMany(Vechestvo::className(), ['id_ves' => 'id_v'])->viaTable('vechmed', ['id_med' => 'id_med']);

    }

    /**
     * Загрузка изображения
     */
    public function uploadImage()
    {
        if ($this->upload) { // только если был выбран файл для загрузки
            $name = md5(uniqid(rand(), true)) . '.' . $this->upload->extension;
            // сохраняем исходное изображение в директории source
            $source = Yii::getAlias('@webroot/image/med/' . $name);
            if ($this->upload->saveAs($source)) {
                // выполняем resize, чтобы получить маленькое изображение
                $thumb = Yii::getAlias('@webroot/image/med/thumb/' . $name);
                Image::thumbnail($source, 250, 250)->save($thumb, ['quality' => 90]);
                return $name;
            }
        }
        return false;
    }

    /**
     * Удаляет старое изображение при загрузке нового
     */
    public static function removeImage($name)
    {
        if (!empty($name)) {
            $source = Yii::getAlias('@webroot/image/med/' . $name);
            if (is_file($source)) {
                unlink($source);
            }
            $thumb = Yii::getAlias('@webroot/image/med/thumb/' . $name);
            if (is_file($thumb)) {
                unlink($thumb);
            }
        }
    }

    /**
     * Удаляет изображение при удалении лекарства
     */
    public function afterDelete()
    {
        parent::afterDelete();
        self::removeImage($this->foto);
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->mnnaznachenie = $this->naznMeds;
        $this->mnprotivopok = $this->protMeds;
        $this->mnvechestvo = $this->vechMeds;
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        $arr = ArrayHelper::map($this->naznMeds, 'id_nazn', 'id_nazn');
        foreach ($this->mnnaznachenie as $one) {
            if (!in_array($one, $arr)) {
                $model = new NaznMed();
                $model->id_med = $this->id_med;
                $model->id_nazn = $one;
                $model->save();
            }
            if (isset($arr[$one])) {
                unset($arr[$one]);
            }
        }

        $arrpr = ArrayHelper::map($this->protMeds, 'id_contr', 'id_contr');
        foreach ($this->mnprotivopok as $one) {
            if (!in_array($one, $arrpr)) {
                $model = new ProtMed();
                $model->id_med = $this->id_med;
                $model->id_prot = $one;
                $model->save();
            }
            if (isset($arrpr[$one])) {
                unset($arrpr[$one]);
            }
        }

        $arrv = ArrayHelper::map($this->vechMeds, 'id_ves', 'id_ves');
        foreach ($this->mnvechestvo as $one) {
            if (!in_array($one, $arrv)) {
                $model = new VechMed();
                $model->id_med = $this->id_med;
                $model->id_v = $one;
                $model->save();
            }
            if (isset($arrv[$one])) {
                unset($arrv[$one]);
            }
        }

        NaznMed::deleteAll(['id_nazn' => $arr]);
        ProtMed::deleteAll(['id_contr' => $arrpr]);
        VechMed::deleteAll(['id_ves' => $arrv]);
    }
}
